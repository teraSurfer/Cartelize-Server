// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "github.com/terasurfer/Cartelize-Server/accounts/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateCustomerEndpoint     endpoint.Endpoint
	CreateAdminEndpoint        endpoint.Endpoint
	GetCustomerByIDEndpoint    endpoint.Endpoint
	GetCustomerByEmailEndpoint endpoint.Endpoint
	GetAdminByIDEndpoint       endpoint.Endpoint
	GetAdminByEmailEndpoint    endpoint.Endpoint
	UpdateCustomerEndpoint     endpoint.Endpoint
	UpdateAdminEndpoint        endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.AccountsService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		CreateAdminEndpoint:        MakeCreateAdminEndpoint(s),
		CreateCustomerEndpoint:     MakeCreateCustomerEndpoint(s),
		GetAdminByEmailEndpoint:    MakeGetAdminByEmailEndpoint(s),
		GetAdminByIDEndpoint:       MakeGetAdminByIDEndpoint(s),
		GetCustomerByEmailEndpoint: MakeGetCustomerByEmailEndpoint(s),
		GetCustomerByIDEndpoint:    MakeGetCustomerByIDEndpoint(s),
		UpdateAdminEndpoint:        MakeUpdateAdminEndpoint(s),
		UpdateCustomerEndpoint:     MakeUpdateCustomerEndpoint(s),
	}
	for _, m := range mdw["CreateCustomer"] {
		eps.CreateCustomerEndpoint = m(eps.CreateCustomerEndpoint)
	}
	for _, m := range mdw["CreateAdmin"] {
		eps.CreateAdminEndpoint = m(eps.CreateAdminEndpoint)
	}
	for _, m := range mdw["GetCustomerByID"] {
		eps.GetCustomerByIDEndpoint = m(eps.GetCustomerByIDEndpoint)
	}
	for _, m := range mdw["GetCustomerByEmail"] {
		eps.GetCustomerByEmailEndpoint = m(eps.GetCustomerByEmailEndpoint)
	}
	for _, m := range mdw["GetAdminByID"] {
		eps.GetAdminByIDEndpoint = m(eps.GetAdminByIDEndpoint)
	}
	for _, m := range mdw["GetAdminByEmail"] {
		eps.GetAdminByEmailEndpoint = m(eps.GetAdminByEmailEndpoint)
	}
	for _, m := range mdw["UpdateCustomer"] {
		eps.UpdateCustomerEndpoint = m(eps.UpdateCustomerEndpoint)
	}
	for _, m := range mdw["UpdateAdmin"] {
		eps.UpdateAdminEndpoint = m(eps.UpdateAdminEndpoint)
	}
	return eps
}
